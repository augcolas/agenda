// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.3.0
//   protoc               v5.28.3
// source: notification.proto

/* eslint-disable */
import { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "notificationproto";

export interface EmptyRequest {
}

export interface AddNotificationListRequest {
  notifications: AddNotificationRequest[];
}

export interface UpdateNotificationListRequest {
  notifications: UpdateNotificationRequest[];
}

export interface JobIdRequest {
  /** default QuedJob Type */
  id: string;
}

export interface NotificationIdRequest {
  /** default QuedJob Type */
  id: string;
}

export interface UpdateNotificationRequest {
  id: string;
  userId: number;
  viewed: boolean;
}

export interface AddNotificationRequest {
  userId: number;
  eventId: number;
}

export interface UserIdRequest {
  userId: number;
}

export interface RemoveNotificationRequest {
  userId: number;
  id: string;
}

export interface MessageResponse {
  message: string;
  status: string;
}

export interface GetNotificationResponse {
  id: string;
  userId: number;
  eventId: number;
  viewed: boolean;
}

export interface GetNotificationListResponse {
  userId: number;
  notifications: GetNotificationResponse[];
}

export const NOTIFICATIONPROTO_PACKAGE_NAME = "notificationproto";

export interface NotificationServiceClient {
  add(request: AddNotificationListRequest, metadata?: Metadata): Observable<MessageResponse>;

  update(request: UpdateNotificationListRequest, metadata?: Metadata): Observable<MessageResponse>;

  remove(request: RemoveNotificationRequest, metadata?: Metadata): Observable<MessageResponse>;

  removeAll(request: UserIdRequest, metadata?: Metadata): Observable<MessageResponse>;

  removeJob(request: JobIdRequest, metadata?: Metadata): Observable<MessageResponse>;

  clearJob(request: EmptyRequest, metadata?: Metadata): Observable<MessageResponse>;

  clearUserJob(request: UserIdRequest, metadata?: Metadata): Observable<MessageResponse>;
}

export interface NotificationServiceController {
  add(
    request: AddNotificationListRequest,
    metadata?: Metadata,
  ): Promise<MessageResponse> | Observable<MessageResponse> | MessageResponse;

  update(
    request: UpdateNotificationListRequest,
    metadata?: Metadata,
  ): Promise<MessageResponse> | Observable<MessageResponse> | MessageResponse;

  remove(
    request: RemoveNotificationRequest,
    metadata?: Metadata,
  ): Promise<MessageResponse> | Observable<MessageResponse> | MessageResponse;

  removeAll(
    request: UserIdRequest,
    metadata?: Metadata,
  ): Promise<MessageResponse> | Observable<MessageResponse> | MessageResponse;

  removeJob(
    request: JobIdRequest,
    metadata?: Metadata,
  ): Promise<MessageResponse> | Observable<MessageResponse> | MessageResponse;

  clearJob(
    request: EmptyRequest,
    metadata?: Metadata,
  ): Promise<MessageResponse> | Observable<MessageResponse> | MessageResponse;

  clearUserJob(
    request: UserIdRequest,
    metadata?: Metadata,
  ): Promise<MessageResponse> | Observable<MessageResponse> | MessageResponse;
}

export function NotificationServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["add", "update", "remove", "removeAll", "removeJob", "clearJob", "clearUserJob"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("NotificationService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("NotificationService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const NOTIFICATION_SERVICE_NAME = "NotificationService";
